(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{372:function(t,n,a){"use strict";a.r(n);var s=a(7),e=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"_1-基本定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本定义"}},[t._v("#")]),t._v(" 1. 基本定义")]),t._v(" "),n("p",[t._v("某变量的引用相当于给该变量起了个别名\n引用与被引用变量共享存储单元")]),t._v(" "),n("h3",{attrs:{id:"_2-初始化方式-定义时必须初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-初始化方式-定义时必须初始化"}},[t._v("#")]),t._v(" 2. 初始化方式(定义时必须初始化)")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int &pm = a;右端为变量\n\nint &pm = 2;右端为常量\n\nint x = 1;\nconst int &px = x;const量引用\n注意，对原变量的引用只能缩小不能放大，如int可引用为const int，const int不可引用为int\npx = 2;此处不对，因为常量不可改变\n")])])]),n("h3",{attrs:{id:"_3-引用传参"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-引用传参"}},[t._v("#")]),t._v(" 3. 引用传参")]),t._v(" "),n("p",[t._v("函数中传递引用可以直接改变原来的值")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int func(int &pa){\n\ta++;\n\treturn 0;\n}\n\nint a = 1;\nfunc(a);\ncout << a << endl;显示2\n对于引用在函数传参时可以理解为：引用只是个“名”，不是“值”，所以在栈内不会单独复制一个值出来\n")])])]),n("h3",{attrs:{id:"_4-引用函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-引用函数"}},[t._v("#")]),t._v(" 4. 引用函数")]),t._v(" "),n("ul",[n("li",[t._v("函数返回引用，实际上返回的是一个存储单元（变量），即“左值”。")]),t._v(" "),n("li",[t._v("因为返回的引用是一个存储单元，所以函数返回后这个单元的生命期应该不会结束，否则返回值将没有意义")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('int &func(int *pint){\n\treturn *pint;\n}\n\nint main(){\n\tint a = 10, b;\n\tb = func(&a)*5;区分&表示取地址还是引用\n\tfunc(&a) = 88;\n\tcout << b << " " << a << endl;输出\n}\n*a 前有类型：a为指向该类型的指针\n   前无类型：*a代指a的指向值\n&a 前由类型：a为某变量的引用\n   前无类型：&a为a的地址值\n')])])])])}),[],!1,null,null,null);n.default=e.exports}}]);